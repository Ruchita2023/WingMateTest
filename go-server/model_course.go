/*
Swagger Student Management System - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Course type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Course{}

// Course struct for Course
type Course struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Desc *string `json:"desc,omitempty"`
}

// NewCourse instantiates a new Course object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCourse() *Course {
	this := Course{}
	return &this
}

// NewCourseWithDefaults instantiates a new Course object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCourseWithDefaults() *Course {
	this := Course{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Course) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Course) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Course) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Course) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Course) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Course) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Course) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Course) SetName(v string) {
	o.Name = &v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *Course) GetDesc() string {
	if o == nil || isNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Course) GetDescOk() (*string, bool) {
	if o == nil || isNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *Course) HasDesc() bool {
	if o != nil && !isNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *Course) SetDesc(v string) {
	o.Desc = &v
}

func (o Course) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Course) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	return toSerialize, nil
}

type NullableCourse struct {
	value *Course
	isSet bool
}

func (v NullableCourse) Get() *Course {
	return v.value
}

func (v *NullableCourse) Set(val *Course) {
	v.value = val
	v.isSet = true
}

func (v NullableCourse) IsSet() bool {
	return v.isSet
}

func (v *NullableCourse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCourse(val *Course) *NullableCourse {
	return &NullableCourse{value: val, isSet: true}
}

func (v NullableCourse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCourse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


